// Generated by CoffeeScript 1.3.3
var should = (function() {
  return (function() {
    var arrayEqual, isArray, self;
    isArray = function(value) {
      return typeof value === 'object' && value instanceof Array;
    };
    arrayEqual = function(array1, array2) {
      if (array1.length !== array2.length) {
        return false;
      } else {
        return array1.every(function(el) {
          return array2.indexOf(el) !== -1;
        });
      }
    };
    return self = {
      equal: function(first, second) {
        if (first !== second && !(isArray(first) && isArray(second) && arrayEqual(first, second))) {
          throw new Error('Values should equal! \n First: ' + JSON.stringify(first) + ' \n Second: ' + JSON.stringify(second));
        }
      },
      differ: function(first, second) {
        if (first === second || (isArray(first) && isArray(second) && arrayEqual(first, second))) {
          throw new Error('Values should differ! \n First: ' + JSON.stringify(first) + ' \n Second: ' + JSON.stringify(second));
        }
      },
      beOfType: function(object, type) {
        if (typeof object !== type) {
          throw new Error("Values should be " + type + ", value is " + (typeof object) + "!");
        }
      },
      beArray: function(value) {
        if (!isArray(value)) {
          throw new Error('Value should be array! \n Value: ' + JSON.stringify(value));
        }
      },
      beObject: function(value) {
        if (typeof value !== 'object') {
          throw new Error('Value should be object! \n Value: ' + JSON.stringify(value));
        }
      },
      beEmpty: function(value) {
        if (value === null) {
          return;
        }
        if (typeof value === 'undefined') {
          return;
        }
        throw new Error('Value should be empty! \n Value: ' + JSON.stringify(value));
      },
      notBeEmpty: function(value) {
        if (value === null || typeof value === 'undefined') {
          throw new Error('Value should not be empty! \n Value: ' + JSON.stringify(value));
        }
      },
      beNull: function(value) {
        if (value === null) {
          return;
        }
        throw new Error('Value should be empty! \n Value: ' + JSON.stringify(value));
      },
      contain: function(array, value) {
        self.beArray(array);
        if (array.indexOf(value) === -1) {
          throw new Error('Array should contain value! \n Array: ' + JSON.stringify(array) + ' \n Value: ' + JSON.stringify(value));
        }
      },
      haveProperty: function(object, propKey) {
        self.beObject(object);
        if (!object.hasOwnProperty(propKey)) {
          throw new Error('Object should have property! \n Object: ' + JSON.stringify(array) + ' \n Property: ' + JSON.stringify(value));
        }
      },
      match: function(string,regexp){
        if (!string.match(regexp)){
          throw new Error('String ' + string + " should match regexp " + regexp.toString());
        }
      }
    };
  })();
}).call(this);
